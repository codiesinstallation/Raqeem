<?php
bolt_decrypt( __FILE__ , '5qvGc1'); return 0;
##!!!##