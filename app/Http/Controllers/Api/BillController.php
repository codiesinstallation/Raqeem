<?php
bolt_decrypt( __FILE__ , '8b6XWx'); return 0;
##!!!##